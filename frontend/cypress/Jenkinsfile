#!groovy
pipeline {

  agent {
    label 'nodejs'
  }

  environment {
    CYPRESS_BASE_URL = 'https://atlas.test.sbb-cloud.net'

    CYPRESS_CLIENT_ID = 'f06799ef-d6a7-4d98-9e31-a51c60761e83'
    CYPRESS_CLIENT_SECRET = credentials('f696bc4f-0636-470c-aed3-f0d8fd17503d')

    CYPRESS_USERNAME = 'fxatl_a@sbb.ch'
    CYPRESS_PASSWORD = credentials('678b4989-f12c-4b4a-955f-35437d7a476f')
    CYPRESS_SCOPE = 'openid profile email offline_access api://2e8c6ce0-304d-42e1-9bce-600b3ea43aad/.default'

    NO_COLOR = 1

    // ZAP proxy configuration
    LOCAL_PROXY_HOST = 'localhost'
    LOCAL_PROXY_PORT = '8090'

    LOCAL_PROXY_FORCED = 'true'
    // App URL for ZAP is the same as the base URL
    APP_URL = "$CYPRESS_BASE_URL"

    START_UP_TIMEOUT = 2 // Maximum time given for ZAP to start up
    ZAP_ACTIVE_SCAN_TIMEOUT = 10
    // Maximum duration of active scan in minutes (must be adjusted adequately)
    ZAP_URL = "http://$LOCAL_PROXY_HOST:$LOCAL_PROXY_PORT"
    // Set Cypress HTTP Proxy to ZAP for passive scanning
    CYPRESS_HTTP_PROXY = "$ZAP_URL"

    ZAP_ACTIVE_POLICY_LEVEL = '50' // Lowest: 10 - Highest: 50
    ZAP_API_KEY = "${sh(returnStdout: true, script: 'echo "$RANDOM"').trim()}"
  }

  parameters {
    string(name: 'successJob', defaultValue: '', description: 'The job triggered on success')
    string(name: 'releaseVersion', defaultValue: '', description: 'Version of triggering release, passed down by EstaCloudPipeline')
    choice(name: 'E2ETests', choices: ['integration', 'release'], description: 'Choose which E2E-Tests to run')
  }

  triggers {
    // At 6am trigger release tests
    parameterizedCron('0 6 * * * %E2ETests=release')
  }

  options {
    disableConcurrentBuilds()
    buildDiscarder(logRotator(numToKeepStr: '15'))
    timeout(time: 20, unit: 'MINUTES')
    timestamps()
  }

  stages {
    stage('Prepare') {
      parallel {
        stage('Install ZAP and start it up') {
          steps {
            // Installing ZAP on Jenkins Agent
            sh 'git clone ssh://git@codessh.sbb.ch:7999/kd_security/owasp-zap-jenkins-helper.git'
            sh 'sudo sh ./owasp-zap-jenkins-helper/zap-install.sh'

            // Start ZAP in the background
            sh 'sudo sh ./owasp-zap-jenkins-helper/zap-run.sh ${BUILD_TAG} ${LOCAL_PROXY_PORT} ${ZAP_API_KEY} &'
          }
        }

        stage('Build npm dependencies') {
          when {
            branch 'master'
          }
          steps {
            sh 'npm -v'
            sh 'node -v'
            sh 'npm --prefix frontend/ ci'
          }
        }

      }
    }

    stage('Run Cypress E2E Tests') {
      when {
        branch 'master'
      }
      steps {
        script {
            if ('release'.equals(params.E2ETests)) {
                 echo 'Run E2E Integration Tests'
                 sh 'npm --prefix frontend/ run cypress:run'
                 echo 'Archive E2E Integration Tests videos'
                 archiveArtifacts 'frontend/cypress/videos/**/*.mp4'
                 echo 'Run E2E Release Tests'
                 sh 'npm --prefix frontend/ run cypress:run-e2e-release'
                 echo 'Archive E2E Integration Tests videos'
                 archiveArtifacts 'frontend/cypress/videos/**/*.mp4'

            } else {
                sh 'npm --prefix frontend/ run cypress:run'
            }
        }
      }
    }

    stage('Start Active ZAP Scan') {
      steps {
        // Ensure that ZAP and endpoint(s) are running before continuing
        // timeout to make sure it does not run indefinitely
        timeout(time: env.START_UP_TIMEOUT, unit: 'MINUTES') {
          waitUntil {
            script {
              try {
                // OWASP ZAP
                sh "curl -o /dev/null -w \"ZAP response status code: %{http_code}\" -kIsSf $ZAP_URL"
                // App
                sh "curl -o /dev/null -w \"App response status code: %{http_code}\" -kIsSf $APP_URL"
                // App via ZAP
                sh "curl -o /dev/null -w \"App response status code via ZAP: %{http_code}\" -kIsSf $APP_URL --proxy-insecure -x $ZAP_URL"

                return true
              } catch (exception) {
                return false
              }
            }
          }
        }
        // timeout to make sure it doesn't run indefinitely
        timeout(time: env.ZAP_ACTIVE_SCAN_TIMEOUT, unit: 'MINUTES') {
          sh '''
                        cd owasp-zap-jenkins-helper && \
                        python -m zap_helper \
                            --port ${LOCAL_PROXY_PORT} \
                            --api-key ${ZAP_API_KEY} \
                            --policy-level  ${ZAP_ACTIVE_POLICY_LEVEL} \
                            --include-regex ${APP_URL}/.* \
                            --exclude-regex NONE \
                            --active-scan
                    '''
        }
      }
    }
  }

  post {
    always {
      sendNotifications()
    }

    success {
      script {
        echo 'Parameters: '
        params.each { param ->
          echo "${param.key} -> ${param.value} "
        }

        if (!params.successJob.isEmpty() && !params.releaseVersion.isEmpty()) {
          echo 'Executing successJob ...'
          build job: params.successJob,
          parameters: [
            string(name: "manualstartcause", value: "deploy:simple,stage:int"),
            string(name: "version", value: params.releaseVersion),
          ],
          wait: false;
          sendEmailToTester();
        }
      }
    }
    failure {
      echo 'Failure...'
      echo 'Archive logs'
      archiveArtifacts 'frontend/cypress/logs/*.json'
      echo 'Archive screenshots'
      archiveArtifacts 'frontend/cypress/screenshots/**.*'
    }
    cleanup {
      shutdownZAP()
      cleanWs()
    }

  }
}

void shutdownZAP() {
  // shut zap down before generating the report
  sh '''
                cd owasp-zap-jenkins-helper && \
                python -m zap_helper \
                    --port ${LOCAL_PROXY_PORT} \
                    --api-key ${ZAP_API_KEY} \
                    --kill-timeout 10 \
                    --kill
            '''

  // create report
  sh 'sudo sh ./owasp-zap-jenkins-helper/zap-report.sh ${WORKSPACE} ${BUILD_TAG} ${BUILD_URL} ${ZAP_ACTIVE_POLICY_LEVEL}'

  // publish ZAP report for later use.
  publishHTML target: [
    allowMissing         : false,
    alwaysLinkToLastBuild: false,
    keepAll              : true,
    reportDir            : 'zapoutput/',
    reportFiles          : 'zap-report.xhtml,zap-report.json',
    reportName           : 'ZAP Report'
  ]
}

void sendEmailToTester(){
  emailext body: """Dear Tester <br> <br>
                    The deployment of the INT environment is about to start. The deployment process may take a few minutes.<br><br>
                    Regards<br>
                    Mr. Jenkins""",
           subject: 'START Deploy INT Environment',
           to: 'joel.hofer@sbb.ch'
}

void sendReleaseEmailJobStatusNotification(){
  emailext body: """ATLAS-E2E Nightly Release Job ran with status: ${currentBuild.currentResult}!<br><br>
                    Please go to ${BUILD_URL} and verify the build. <br><br>
                    Regards<br>
                    Mr. Jenkins""",
           subject: "ATLAS-E2E Nightly Release Job (${JOB_NAME} - ${BUILD_NUMBER}) Status: ${currentBuild.currentResult}",
           to: 'joel.hofer@sbb.ch'
}

void sendNotifications(){

  def notificationColor = '#C0C0C0';
  if('SUCCESS'.equals(currentBuild.currentResult)){
    notificationColor = "#00FF00";
  }
  if('FAILURE'.equals(currentBuild.currentResult)){
    notificationColor = "#FF0000";
  }
  if('UNSTABLE'.equals(currentBuild.currentResult)){
    notificationColor = "#FFA500"
  }

  if ('release'.equals(params.E2ETests)) {
    sendReleaseEmailJobStatusNotification()
    office365ConnectorSend(
          webhookUrl: "https://sbb.webhook.office.com/webhookb2/e262e9dc-5836-4c36-b3e5-0e827f2a2787@2cda5d11-f0ac-46b3-967d-af1b2e1bd01a/JenkinsCI/1d957b31eb2c46aeac8003d5a70e1926/8231c64b-bcb4-497e-93bf-0213ebdac9e4",,
          message: "ATLAS-E2E Nightly Release was ${currentBuild.currentResult}!",
          color: notificationColor,
          status: currentBuild.currentResult
    )
  }
}

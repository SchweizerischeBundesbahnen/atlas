/**
 * Atlas API
 *
 * Contact: TechSupport-ATLAS@sbb.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Status } from './status';
import { LineVersionWorkflow } from './lineVersionWorkflow';
import { PaymentType } from './paymentType';
import { LineType } from './lineType';


/**
 * Deprecated in favor of LineVersionV2
 */
export interface LineVersion { 
    /**
     * Object creation date
     */
    readonly creationDate?: string;
    /**
     * User creator
     */
    readonly creator?: string;
    /**
     * Last edition date
     */
    readonly editionDate?: string;
    /**
     * User editor
     */
    readonly editor?: string;
    status?: Status;
    /**
     * This ID helps identify versions of a line in the use case front end and/or update. This ID can be deleted if the version is no longer present. Do not use this ID to map your object to a line. To do this, use the slnid in combination with the data range (valid from/valid until). 
     */
    readonly id?: number;
    /**
     * SLNID
     */
    readonly slnid?: string;
    /**
     * LongName
     */
    longName?: string;
    /**
     * Valid from
     */
    validFrom: Date;
    /**
     * Valid to
     */
    validTo: Date;
    /**
     * BusinessOrganisation SBOID
     */
    businessOrganisation: string;
    /**
     * Comment
     */
    comment?: string;
    /**
     * Optimistic locking version - instead of ETag HTTP Header (see RFC7232:Section 2.3)
     */
    etagVersion?: number;
    /**
     * Workflows related to the line version
     */
    readonly lineVersionWorkflows?: Set<LineVersionWorkflow>;
    /**
     * SwissLineNumber
     */
    swissLineNumber: string;
    /**
     * Description
     */
    description?: string;
    /**
     * Number
     */
    number?: string;
    lineType: LineType;
    paymentType?: PaymentType;
    /**
     * AlternativeName
     */
    alternativeName?: string;
    /**
     * CombinationName
     */
    combinationName?: string;
    /**
     * Icon
     */
    icon?: string;
    /**
     * Color of the font in RGB
     */
    colorFontRgb: string;
    /**
     * Color of the background in RGB
     */
    colorBackRgb: string;
    /**
     * Color of the font in CMYK
     */
    colorFontCmyk: string;
    /**
     * Color of the background in CMYK
     */
    colorBackCmyk: string;
}
export namespace LineVersion {
}



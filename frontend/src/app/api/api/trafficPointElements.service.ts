/**
 * Atlas API
 * This is the API for all your needs SKI core data<br/><br/>Atlas serves the following applications:<br/><ul><li>line-directory:1.358.0<br/>RestDoc: <a href=\'https://line-directory.local.app.sbb.ch/static/rest-api.html\' target=\'_blank\'>https://line-directory.local.app.sbb.ch/static/rest-api.html</a></li><li>service-point-directory:1.358.0<br/>RestDoc: <a href=\'https://service-point-directory.local.app.sbb.ch/static/rest-api.html\' target=\'_blank\'>https://service-point-directory.local.app.sbb.ch/static/rest-api.html</a></li><li>business-organisation-directory:1.358.0<br/>RestDoc: <a href=\'https://business-organisation-directory.local.app.sbb.ch/static/rest-api.html\' target=\'_blank\'>https://business-organisation-directory.local.app.sbb.ch/static/rest-api.html</a></li><li>workflow:1.358.0<br/>RestDoc: <a href=\'https://workflow.local.app.sbb.ch/static/rest-api.html\' target=\'_blank\'>https://workflow.local.app.sbb.ch/static/rest-api.html</a></li><li>export-service-point:v0<br/>RestDoc: <a href=\'https://export-service-point.local.app.sbb.ch/static/rest-api.html\' target=\'_blank\'>https://export-service-point.local.app.sbb.ch/static/rest-api.html</a></li><li>user-administration:1.358.0<br/>RestDoc: <a href=\'https://user-administration.local.app.sbb.ch/static/rest-api.html\' target=\'_blank\'>https://user-administration.local.app.sbb.ch/static/rest-api.html</a></li><li>import-service-point:v0<br/>RestDoc: <a href=\'https://import-service-point.local.app.sbb.ch/static/rest-api.html\' target=\'_blank\'>https://import-service-point.local.app.sbb.ch/static/rest-api.html</a></li></ul>
 *
 * The version of the OpenAPI document: 1.358.0
 * Contact: TechSupport-ATLAS@sbb.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
  HttpParameterCodec,
} from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { Observable } from 'rxjs';

import { ContainerReadTrafficPointElementVersionModel } from '../model/models';
import { CreateTrafficPointElementVersionModel } from '../model/models';
import { ErrorResponse } from '../model/models';
import { ReadTrafficPointElementVersionModel } from '../model/models';
import { ServicePointNumber } from '../model/models';
import { TrafficPointImportRequest } from '../model/models';
import { TrafficPointItemImportResult } from '../model/models';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable({
  providedIn: 'root',
})
export class TrafficPointElementsService {
  protected basePath = 'http://localhost';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  public encoder: HttpParameterCodec;

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== 'string') {
      if (typeof basePath !== 'string') {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }

  private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
    if (typeof value === 'object' && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }

  private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
    if (value == null) {
      return httpParams;
    }

    if (typeof value === 'object') {
      if (Array.isArray(value)) {
        (value as any[]).forEach(
          (elem) => (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))
        );
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
        } else {
          throw Error('key may not be null if value is Date');
        }
      } else {
        Object.keys(value).forEach(
          (k) =>
            (httpParams = this.addToHttpParamsRecursive(
              httpParams,
              value[k],
              key != null ? `${key}.${k}` : k
            ))
        );
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error('key may not be null if value is not object or array');
    }
    return httpParams;
  }

  /**
   * @param createTrafficPointElementVersionModel
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createTrafficPoint(
    createTrafficPointElementVersionModel: CreateTrafficPointElementVersionModel,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' }
  ): Observable<ReadTrafficPointElementVersionModel>;
  public createTrafficPoint(
    createTrafficPointElementVersionModel: CreateTrafficPointElementVersionModel,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' }
  ): Observable<HttpResponse<ReadTrafficPointElementVersionModel>>;
  public createTrafficPoint(
    createTrafficPointElementVersionModel: CreateTrafficPointElementVersionModel,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' }
  ): Observable<HttpEvent<ReadTrafficPointElementVersionModel>>;
  public createTrafficPoint(
    createTrafficPointElementVersionModel: CreateTrafficPointElementVersionModel,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: '*/*' }
  ): Observable<any> {
    if (
      createTrafficPointElementVersionModel === null ||
      createTrafficPointElementVersionModel === undefined
    ) {
      throw new Error(
        'Required parameter createTrafficPointElementVersionModel was null or undefined when calling createTrafficPoint.'
      );
    }

    let headers = this.defaultHeaders;

    let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['*/*'];
      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
      responseType_ = 'text';
    }

    return this.httpClient.post<ReadTrafficPointElementVersionModel>(
      `${this.configuration.basePath}/service-point-directory/v1/traffic-point-elements`,
      createTrafficPointElementVersionModel,
      {
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * @param sloid
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getTrafficPointElement(
    sloid: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' }
  ): Observable<Array<ReadTrafficPointElementVersionModel>>;
  public getTrafficPointElement(
    sloid: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' }
  ): Observable<HttpResponse<Array<ReadTrafficPointElementVersionModel>>>;
  public getTrafficPointElement(
    sloid: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' }
  ): Observable<HttpEvent<Array<ReadTrafficPointElementVersionModel>>>;
  public getTrafficPointElement(
    sloid: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: '*/*' }
  ): Observable<any> {
    if (sloid === null || sloid === undefined) {
      throw new Error(
        'Required parameter sloid was null or undefined when calling getTrafficPointElement.'
      );
    }

    let headers = this.defaultHeaders;

    let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['*/*'];
      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
      responseType_ = 'text';
    }

    return this.httpClient.get<Array<ReadTrafficPointElementVersionModel>>(
      `${
        this.configuration.basePath
      }/service-point-directory/v1/traffic-point-elements/${encodeURIComponent(String(sloid))}`,
      {
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getTrafficPointElementVersion(
    id: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' }
  ): Observable<ReadTrafficPointElementVersionModel>;
  public getTrafficPointElementVersion(
    id: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' }
  ): Observable<HttpResponse<ReadTrafficPointElementVersionModel>>;
  public getTrafficPointElementVersion(
    id: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' }
  ): Observable<HttpEvent<ReadTrafficPointElementVersionModel>>;
  public getTrafficPointElementVersion(
    id: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: '*/*' }
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling getTrafficPointElementVersion.'
      );
    }

    let headers = this.defaultHeaders;

    let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['*/*'];
      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
      responseType_ = 'text';
    }

    return this.httpClient.get<ReadTrafficPointElementVersionModel>(
      `${
        this.configuration.basePath
      }/service-point-directory/v1/traffic-point-elements/versions/${encodeURIComponent(
        String(id)
      )}`,
      {
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * INFO: Versions of DiDok3 were merged during migration, so there are now a few versions less here.
   * @param sloids Unique key for service points which is used in the customer information.
   * @param servicePointNumbers DiDok-Number formerly known as UIC-Code, combination of uicCountryCode and numberShort.
   * @param parentsloids
   * @param sboids sboid
   * @param uicCountryCodes List of UIC Country codes. The UIC Country code applies to the country of the service point number
   * @param servicePointNumbersShort Number of a service point which is provided by DiDok for Switzerland. It is part of the unique key for service points.
   * @param validOn ValidOn. Date format: yyyy-MM-dd
   * @param fromDate [fromDate] &lt;&#x3D; validFrom. Filters for all versions where validFrom is bigger or equal than fromDate. Date format: yyyy-MM-dd
   * @param toDate [toDate] &gt;&#x3D; validTo. Filters for all versions where validTo is smaller or equal than toDate. Date format: yyyy-MM-dd
   * @param createdAfter creationDate &gt;&#x3D; [createdAfter]. DateTime format: yyyy-MM-dd HH:mm:ss
   * @param modifiedAfter editionDate &gt;&#x3D; [modifiedAfter]. DateTime format: yyyy-MM-dd HH:mm:ss
   * @param page Zero-based page index (0..N)
   * @param size The size of the page to be returned
   * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getTrafficPointElements(
    sloids?: Array<string>,
    servicePointNumbers?: Array<ServicePointNumber>,
    parentsloids?: Array<string>,
    sboids?: Array<string>,
    uicCountryCodes?: Array<string>,
    servicePointNumbersShort?: Array<number>,
    validOn?: Date,
    fromDate?: Date,
    toDate?: Date,
    createdAfter?: string,
    modifiedAfter?: string,
    page?: number,
    size?: number,
    sort?: Array<string>,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' }
  ): Observable<ContainerReadTrafficPointElementVersionModel>;
  public getTrafficPointElements(
    sloids?: Array<string>,
    servicePointNumbers?: Array<ServicePointNumber>,
    parentsloids?: Array<string>,
    sboids?: Array<string>,
    uicCountryCodes?: Array<string>,
    servicePointNumbersShort?: Array<number>,
    validOn?: Date,
    fromDate?: Date,
    toDate?: Date,
    createdAfter?: string,
    modifiedAfter?: string,
    page?: number,
    size?: number,
    sort?: Array<string>,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' }
  ): Observable<HttpResponse<ContainerReadTrafficPointElementVersionModel>>;
  public getTrafficPointElements(
    sloids?: Array<string>,
    servicePointNumbers?: Array<ServicePointNumber>,
    parentsloids?: Array<string>,
    sboids?: Array<string>,
    uicCountryCodes?: Array<string>,
    servicePointNumbersShort?: Array<number>,
    validOn?: Date,
    fromDate?: Date,
    toDate?: Date,
    createdAfter?: string,
    modifiedAfter?: string,
    page?: number,
    size?: number,
    sort?: Array<string>,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' }
  ): Observable<HttpEvent<ContainerReadTrafficPointElementVersionModel>>;
  public getTrafficPointElements(
    sloids?: Array<string>,
    servicePointNumbers?: Array<ServicePointNumber>,
    parentsloids?: Array<string>,
    sboids?: Array<string>,
    uicCountryCodes?: Array<string>,
    servicePointNumbersShort?: Array<number>,
    validOn?: Date,
    fromDate?: Date,
    toDate?: Date,
    createdAfter?: string,
    modifiedAfter?: string,
    page?: number,
    size?: number,
    sort?: Array<string>,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: '*/*' }
  ): Observable<any> {
    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (sloids) {
      sloids.forEach((element) => {
        queryParameters = this.addToHttpParams(queryParameters, <any>element, 'sloids');
      });
    }
    if (servicePointNumbers) {
      servicePointNumbers.forEach((element) => {
        queryParameters = this.addToHttpParams(
          queryParameters,
          <any>element,
          'servicePointNumbers'
        );
      });
    }
    if (parentsloids) {
      parentsloids.forEach((element) => {
        queryParameters = this.addToHttpParams(queryParameters, <any>element, 'parentsloids');
      });
    }
    if (sboids) {
      sboids.forEach((element) => {
        queryParameters = this.addToHttpParams(queryParameters, <any>element, 'sboids');
      });
    }
    if (uicCountryCodes) {
      uicCountryCodes.forEach((element) => {
        queryParameters = this.addToHttpParams(queryParameters, <any>element, 'uicCountryCodes');
      });
    }
    if (servicePointNumbersShort) {
      servicePointNumbersShort.forEach((element) => {
        queryParameters = this.addToHttpParams(
          queryParameters,
          <any>element,
          'servicePointNumbersShort'
        );
      });
    }
    if (validOn !== undefined && validOn !== null) {
      queryParameters = this.addToHttpParams(queryParameters, <any>validOn, 'validOn');
    }
    if (fromDate !== undefined && fromDate !== null) {
      queryParameters = this.addToHttpParams(queryParameters, <any>fromDate, 'fromDate');
    }
    if (toDate !== undefined && toDate !== null) {
      queryParameters = this.addToHttpParams(queryParameters, <any>toDate, 'toDate');
    }
    if (createdAfter !== undefined && createdAfter !== null) {
      queryParameters = this.addToHttpParams(queryParameters, <any>createdAfter, 'createdAfter');
    }
    if (modifiedAfter !== undefined && modifiedAfter !== null) {
      queryParameters = this.addToHttpParams(queryParameters, <any>modifiedAfter, 'modifiedAfter');
    }
    if (page !== undefined && page !== null) {
      queryParameters = this.addToHttpParams(queryParameters, <any>page, 'page');
    }
    if (size !== undefined && size !== null) {
      queryParameters = this.addToHttpParams(queryParameters, <any>size, 'size');
    }
    if (sort) {
      sort.forEach((element) => {
        queryParameters = this.addToHttpParams(queryParameters, <any>element, 'sort');
      });
    }

    let headers = this.defaultHeaders;

    let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['*/*'];
      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
      responseType_ = 'text';
    }

    return this.httpClient.get<ContainerReadTrafficPointElementVersionModel>(
      `${this.configuration.basePath}/service-point-directory/v1/traffic-point-elements`,
      {
        params: queryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * @param trafficPointImportRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public importTrafficPoints(
    trafficPointImportRequest: TrafficPointImportRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' }
  ): Observable<Array<TrafficPointItemImportResult>>;
  public importTrafficPoints(
    trafficPointImportRequest: TrafficPointImportRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' }
  ): Observable<HttpResponse<Array<TrafficPointItemImportResult>>>;
  public importTrafficPoints(
    trafficPointImportRequest: TrafficPointImportRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' }
  ): Observable<HttpEvent<Array<TrafficPointItemImportResult>>>;
  public importTrafficPoints(
    trafficPointImportRequest: TrafficPointImportRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: '*/*' }
  ): Observable<any> {
    if (trafficPointImportRequest === null || trafficPointImportRequest === undefined) {
      throw new Error(
        'Required parameter trafficPointImportRequest was null or undefined when calling importTrafficPoints.'
      );
    }

    let headers = this.defaultHeaders;

    let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['*/*'];
      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
      responseType_ = 'text';
    }

    return this.httpClient.post<Array<TrafficPointItemImportResult>>(
      `${this.configuration.basePath}/service-point-directory/v1/traffic-point-elements/import`,
      trafficPointImportRequest,
      {
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * @param id
   * @param createTrafficPointElementVersionModel
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateTrafficPoint(
    id: number,
    createTrafficPointElementVersionModel: CreateTrafficPointElementVersionModel,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' }
  ): Observable<Array<ReadTrafficPointElementVersionModel>>;
  public updateTrafficPoint(
    id: number,
    createTrafficPointElementVersionModel: CreateTrafficPointElementVersionModel,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' }
  ): Observable<HttpResponse<Array<ReadTrafficPointElementVersionModel>>>;
  public updateTrafficPoint(
    id: number,
    createTrafficPointElementVersionModel: CreateTrafficPointElementVersionModel,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' }
  ): Observable<HttpEvent<Array<ReadTrafficPointElementVersionModel>>>;
  public updateTrafficPoint(
    id: number,
    createTrafficPointElementVersionModel: CreateTrafficPointElementVersionModel,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: '*/*' }
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling updateTrafficPoint.'
      );
    }
    if (
      createTrafficPointElementVersionModel === null ||
      createTrafficPointElementVersionModel === undefined
    ) {
      throw new Error(
        'Required parameter createTrafficPointElementVersionModel was null or undefined when calling updateTrafficPoint.'
      );
    }

    let headers = this.defaultHeaders;

    let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['*/*'];
      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
      responseType_ = 'text';
    }

    return this.httpClient.put<Array<ReadTrafficPointElementVersionModel>>(
      `${
        this.configuration.basePath
      }/service-point-directory/v1/traffic-point-elements/${encodeURIComponent(String(id))}`,
      createTrafficPointElementVersionModel,
      {
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }
}

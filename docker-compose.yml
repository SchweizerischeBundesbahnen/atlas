version: "3.8"

services:
  lidi-db:
    image: postgres:17.1
    restart: always
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pwd
      POSTGRES_DB: line-directory
    volumes:
      - "/var/lib/postgresql/data"
    command:
      - "postgres"
      - "-c"
      - "datestyle=iso, ymd"

  bodi-db:
    image: postgres:17.1
    restart: always
    ports:
      - "5435:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pwd
      POSTGRES_DB: business-organisation-directory
    volumes:
      - "/var/lib/postgresql/data"
    command:
      - "postgres"
      - "-c"
      - "datestyle=iso, ymd"

  scheduling-db:
    image: postgres:17.1
    restart: always
    ports:
      - "5436:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pwd
      POSTGRES_DB: scheduling
    volumes:
      - "/var/lib/postgresql/data"
    command:
      - "postgres"
      - "-c"
      - "datestyle=iso, ymd"

  user-administration-db:
    image: postgres:17.1
    restart: always
    ports:
      - "5437:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pwd
      POSTGRES_DB: user-administration
    volumes:
      - "/var/lib/postgresql/data"
    command:
      - "postgres"
      - "-c"
      - "datestyle=iso, ymd"

  workflow-db:
    image: postgres:17.1
    restart: always
    ports:
      - "5438:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pwd
      POSTGRES_DB: workflow
    volumes:
      - "/var/lib/postgresql/data"
    command:
      - "postgres"
      - "-c"
      - "datestyle=iso, ymd"

  service-point-directory-db:
    image: postgres:17.1
    restart: always
    ports:
      - "5439:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pwd
      POSTGRES_DB: service-point-directory
    volumes:
      - "/var/lib/postgresql/data"
    command:
      - "postgres"
      - "-c"
      - "datestyle=iso, ymd"

  bulk-import-service-db:
    image: postgres:17.1
    restart: always
    ports:
      - "5440:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pwd
      POSTGRES_DB: bulk-import-service
    volumes:
      - "/var/lib/postgresql/data"
    command:
      - "postgres"
      - "-c"
      - "datestyle=iso, ymd"

  export-service-db:
    image: postgres:17.1
    restart: always
    ports:
      - "5441:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pwd
      POSTGRES_DB: export-service
    volumes:
      - "/var/lib/postgresql/data"
    command:
      - "postgres"
      - "-c"
      - "datestyle=iso, ymd"

  prm-service-db:
    image: postgres:17.1
    restart: always
    ports:
      - "5442:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pwd
      POSTGRES_DB: prm-directory
    volumes:
      - "/var/lib/postgresql/data"
    command:
      - "postgres"
      - "-c"
      - "datestyle=iso, ymd"

  location-db:
    image: postgres:17.1
    restart: always
    ports:
      - "5443:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pwd
      POSTGRES_DB: location
    volumes:
      - "/var/lib/postgresql/data"
    command:
      - "postgres"
      - "-c"
      - "datestyle=iso, ymd"

  zookeeper:
    image: bitnami/zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: &kafka-image bitnami/kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    restart: on-failure
    environment:
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9092
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181

  init-kafka:
    image: *kafka-image
    working_dir: /opt/bitnami/kafka/bin
    entrypoint: /bin/bash
    depends_on:
      kafka:
        condition: service_healthy
    command: |
      kafka-topics.sh --create --if-not-exists --topic atlas.mail --replication-factor=1 --partitions=1 --bootstrap-server kafka:9092
      kafka-topics.sh --create --if-not-exists --topic atlas.user.administration --replication-factor=1 --partitions=1 --bootstrap-server kafka:9092
      kafka-topics.sh --create --if-not-exists --topic atlas.business.organisation --replication-factor=1 --partitions=1 --bootstrap-server kafka:9092
      kafka-topics.sh --create --if-not-exists --topic atlas.transport.company --replication-factor=1 --partitions=1 --bootstrap-server kafka:9092
      kafka-topics.sh --create --if-not-exists --topic atlas.service.point --replication-factor=1 --partitions=1 --bootstrap-server kafka:9092
  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    restart: always
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command:
      - "server"
      - "/data"
      - "--console-address"
      - ":9001"

  minio-init:
    image: minio/mc
    depends_on:
      - minio
    volumes:
      - ./init-minio.sh:/init-minio.sh
    environment:
      MINIO_SERVER_URL: http://minio:9000
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    entrypoint: /bin/sh -c "/init-minio.sh"

  wiremock:
    build:
      context: ./wiremock
      dockerfile: Dockerfile
    ports:
      - "8666:8080"
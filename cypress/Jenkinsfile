#!groovy
pipeline {

  agent {
    label 'java-small'
  }

  environment {
    CYPRESS_BASE_URL = 'https://atlas-frontend-test.apps.aws01t.sbb-aws-test.net'

    CYPRESS_CLIENT_ID = 'a4b0a771-8dfe-4d52-bc4e-30f0ae525714'
    CYPRESS_CLIENT_SECRET = credentials('ca97e11a-0ca0-4281-81c8-c3fbd33d17c2	')

    CYPRESS_USERNAME = 'fxatl_a@sbb.ch'
    CYPRESS_PASSWORD = credentials('678b4989-f12c-4b4a-955f-35437d7a476f')
    CYPRESS_SCOPE = 'openid profile email offline_access api://00dcfe9e-caa3-45da-a9bc-47c408182ee8/.default'

    NO_COLOR = 1
  }

  parameters {
    string(name: 'successJob', defaultValue: '', description: 'The job triggered on success')
    string(name: 'releaseVersion', defaultValue: '', description: 'Version of triggering release, passed down by EstaCloudPipeline')
  }

  options {
    disableConcurrentBuilds()
    buildDiscarder(logRotator(numToKeepStr:'15'))
    timeout(time: 10, unit: 'MINUTES')
    timestamps()
  }

  stages {
    stage('Build npm dependencies') {
      when {
        branch 'master'
      }
      steps {
        sh 'npm ci'
      }
    }
    stage('Run Cypress E2E Tests') {
      when {
        branch 'master'
      }
      steps {
        sh 'npm run cypress:run'
      }
    }
  }

  post {
    always {
      echo 'Archive cypress videos'
      archiveArtifacts 'cypress/videos/*.mp4'
    }
    success {
      script {
        echo 'Parameters: '
        params.each { param ->
          echo "${param.key} -> ${param.value} "
        }

        if (!params.successJob.isEmpty() && !params.releaseVersion.isEmpty()) {
          echo 'Executing successJob ...'
          build job: params.successJob,
            parameters: [
              choice(name: 'manualstartcause', value: 'deploy:simple,stage:int'),
              string(name: 'version', value: params.releaseVersion)
            ]
        }
      }
    }
    failure {
      echo 'Failure...'
      echo 'Archive logs videos'
      archiveArtifacts 'cypress/logs/*.json'
      echo 'Archive screenshots'
      archiveArtifacts 'cypress/screenshots/**.*'
    }
    cleanup{
      cleanWs()
    }

  }
}

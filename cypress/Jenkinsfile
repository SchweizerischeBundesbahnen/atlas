#!groovy
pipeline {

  agent {
    label 'java-small'
  }

  environment {
    CYPRESS_BASE_URL = 'https://atlas-frontend-test.apps.aws01t.sbb-aws-test.net'

    CYPRESS_CLIENT_ID = 'f06799ef-d6a7-4d98-9e31-a51c60761e83'
    CYPRESS_CLIENT_SECRET = credentials('f696bc4f-0636-470c-aed3-f0d8fd17503d')

    CYPRESS_USERNAME = 'fxatl_a@sbb.ch'
    CYPRESS_PASSWORD = credentials('678b4989-f12c-4b4a-955f-35437d7a476f')
    CYPRESS_SCOPE = 'openid profile email offline_access api://2e8c6ce0-304d-42e1-9bce-600b3ea43aad/.default'

    NO_COLOR = 1
  }

  parameters {
    string(name: 'successJob', defaultValue: '', description: 'The job triggered on success')
    string(name: 'releaseVersion', defaultValue: '', description: 'Version of triggering release, passed down by EstaCloudPipeline')
  }

  options {
    disableConcurrentBuilds()
    buildDiscarder(logRotator(numToKeepStr:'15'))
    timeout(time: 15, unit: 'MINUTES')
    timestamps()
    office365ConnectorWebhooks([[
      name: "Office 365",
      url: "https://sbb.webhook.office.com/webhookb2/e262e9dc-5836-4c36-b3e5-0e827f2a2787@2cda5d11-f0ac-46b3-967d-af1b2e1bd01a/JenkinsCI/1d957b31eb2c46aeac8003d5a70e1926/8231c64b-bcb4-497e-93bf-0213ebdac9e4",
      message: "${env.JOB_NAME}",
      status: "${currentBuild.status}",
      notifyBackToNormal: true,
      notifyFailure: true,
      notifyRepeatedFailure: true,
      notifySuccess: true,
      notifyAborted: true ]]
    )
  }

  stages {
    stage('Deploy int environment (Temporary...) '){
      when {
        branch 'master'
      }
      steps{
        script {
          if(!param.key?.trim() && !param.value?.trim()){
            echo 'As soon as we found a solution to make the E2E tests stable, we deploy on INT without waiting for the tests results! '
            echo 'Parameters: '
            params.each { param ->
              echo "${param.key} -> ${param.value} "
            }
            echo 'Executing successJob ...'
            build job: params.successJob,
              parameters: [
                string(name: "manualstartcause", value: "deploy:simple,stage:int"),
                string(name: "version", value: params.releaseVersion),
              ],
            wait: false
          }
        }
      }
    }
    stage('Build npm dependencies') {
      when {
        branch 'master'
      }
      steps {
        sh 'npm ci'
      }
    }
    stage('Run Cypress E2E Tests') {
      when {
        branch 'master'
      }
      steps {
        sh 'npm run cypress:run'
      }
    }
  }

  post {
    always {
      echo 'Archive cypress videos'
      archiveArtifacts 'cypress/videos/**/*.mp4'

    }
    failure {
      echo 'Failure...'
      echo 'Archive logs'
      archiveArtifacts 'cypress/logs/*.json'
      echo 'Archive screenshots'
      archiveArtifacts 'cypress/screenshots/**.*'
    }
    cleanup{
      cleanWs()
    }

  }
}
